{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":"\u041c\u0438\u043d\u0438\u0441\u0442\u0435\u0440\u0441\u0442\u0432\u043e \u043d\u0430\u0443\u043a\u0438 \u0438 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0439 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0438 \u0444\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u00ab\u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e\u00bb \u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb \u0410\u0432\u0442\u043e\u0440: \u0411\u0443\u043b\u044b\u0433\u0430 \u0415.\u0410. \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442: \u0418\u041a\u0422 \u0413\u0440\u0443\u043f\u043f\u0430: K33421 \u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2024"},{"location":"Lab1/auth/","title":"\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438","text":"<pre><code>from fastapi import HTTPException\nfrom passlib.context import CryptContext\nfrom datetime import datetime, timedelta\nimport jwt\nfrom sqlmodel import Session\n\nfrom models import User\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\nSECRET_KEY = \"mysecretkey\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nclass UserManager:\n    def create_user(self, session: Session, user: User):\n        db_user = session.get(User, user.username)\n        if db_user:\n            raise HTTPException(status_code=400, detail=\"Username already registered\")\n        hashed_password = pwd_context.hash(user.hashed_password)\n        user.hashed_password = hashed_password\n        session.add(user)\n        session.commit()\n\n    def get_user(self, session: Session, username: str):\n        return session.get(User, username)\n\n    def verify_password(self, plain_password: str, hashed_password: str):\n        return pwd_context.verify(plain_password, hashed_password)\n\n    def create_access_token(self, data: dict):\n        to_encode = data.copy()\n        expire = datetime.now() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n        to_encode.update({\"exp\": expire})\n        encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n        return encoded_jwt\n\n    def change_password(self, session: Session, username, new_password):\n        user = self.get_user(session, username)\n        user.hashed_password = pwd_context.hash(new_password)\n        session.add(user)\n        session.commit()\n        session.refresh(user)\n</code></pre>"},{"location":"Lab1/models/","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f User [\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c], Task [\u0417\u0430\u0434\u0430\u0447\u0430], Notification [\u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435], Day [\u0414\u0435\u043d\u044c], Week [\u041d\u0435\u0434\u0435\u043b\u044f] \u0438 Comment [\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439].</p>"},{"location":"Lab1/models/#user","title":"User","text":"<pre><code>class User(SQLModel, table=True):\n    username: str = Field(default=None, primary_key=True)\n    name: str\n    surname: str\n    patronymic: str\n    hashed_password: str\n    comments: List[\"Comment\"] = Relationship(back_populates=\"user\")\n    tasks: List[\"Task\"] = Relationship(back_populates=\"user\", link_model=TaskUser)\n    task_creator: List[\"Task\"] = Relationship(back_populates=\"creator\")\n</code></pre>"},{"location":"Lab1/models/#task","title":"Task","text":"<pre><code>class TaskDefault(SQLModel):\n    title: str\n    description: str\n    day_id: Optional[int] = Field(default=None, foreign_key=\"timetableday.id\")\n    time_start: datetime\n    planned_time_end: datetime\n    time_end: datetime | None\n    priority: int\n    creator_id: str = Field(default=None, foreign_key=\"user.username\")\n\n\nclass TaskDayNotificationsUser(TaskDefault):\n    day: Optional[TimetableDay] = None\n    notification: Optional[List[Notification]] = [None]\n    user: Optional[List[User]] = [None]\n    creator: Optional[User]\n\n\nclass Task(TaskDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    day: Optional[TimetableDay] = Relationship(back_populates=\"tasks\")\n    notification: Optional[List[Notification]] | None = Relationship(back_populates=\"tasks\", link_model=TaskNotification)\n    comments: List[\"Comment\"] | None = Relationship(back_populates=\"task\")\n    user: Optional[List[User]] | None = Relationship(back_populates=\"tasks\", link_model=TaskUser)\n    creator: Optional[User] | None = Relationship(back_populates=\"task_creator\")\n</code></pre>"},{"location":"Lab1/models/#notification","title":"Notification","text":"<pre><code>class TaskNotification(SQLModel, table=True):\n    task_id: Optional[int] = Field(\n        default=None, foreign_key=\"task.id\", primary_key=True\n    )\n    notification_id: Optional[int] = Field(\n        default=None, foreign_key=\"notification.id\", primary_key=True\n    )\n\n\nclass Notification(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    datetime: datetime\n    tasks: List[\"Task\"] = Relationship(back_populates=\"notification\", link_model=TaskNotification)\n</code></pre>"},{"location":"Lab1/models/#day","title":"Day","text":"<pre><code>class TimetableDayDefault(SQLModel):\ndate: datetime\nweek_id: Optional[int] = Field(default=None, foreign_key=\"timetableweek.id\")\n\n\nclass TimetableDayWeek(TimetableDayDefault):\n    week: Optional[TimetableWeek] = None\n\n\nclass TimetableDay(TimetableDayDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    week: Optional[TimetableWeek] = Relationship(back_populates=\"days\")\n    tasks: List[\"Task\"] = Relationship(back_populates=\"day\")\n</code></pre>"},{"location":"Lab1/models/#week","title":"Week","text":"<pre><code>class TimetableWeek(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    date_start: datetime\n    date_end: datetime\n    days: List[\"TimetableDay\"] = Relationship(back_populates=\"week\")\n</code></pre>"},{"location":"Lab1/models/#comment","title":"Comment","text":"<pre><code>class CommentDefault(SQLModel):\n    text: str\n    file: bytes | None\n    created_at: datetime\n    user_id: Optional[str] = Field(default=None, foreign_key=\"user.username\")\n    task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\")\n\n\nclass CommentUserTask(CommentDefault):\n    user: Optional[User] = None\n    task: Optional[Task] = None\n\n\nclass Comment(CommentDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    user: Optional[User] = Relationship(back_populates=\"comments\")\n    task: Optional[Task] = Relationship(back_populates=\"comments\")\n</code></pre>"},{"location":"Lab1/models/#taskuser-","title":"TaskUser (\u0441\u0432\u044f\u0437\u044c \u043c\u043d\u043e\u0433\u0438\u0435-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c)","text":"<pre><code>class TaskUser(SQLModel, table=True):\n    tasks: Optional[int] = Field(\n        default=None, foreign_key=\"task.id\", primary_key=True\n    )\n    user: Optional[str] = Field(\n        default=None, foreign_key=\"user.username\", primary_key=True\n    )\n</code></pre>"},{"location":"Lab1/views/","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f","text":""},{"location":"Lab1/views/#_2","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>app = FastAPI()\nload_dotenv()\ndb_url = os.getenv('DB_ADMIN')\nengine = create_engine(db_url, echo=True)\n\n\n@app.on_event(\"startup\")\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\n@app.get(\"/\")\ndef hello():\n    return \"Hello!\"\n</code></pre>"},{"location":"Lab1/views/#_3","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c","text":"<pre><code>user_manager = UserManager()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.post(\"/register/\")\ndef register_user(user: User, session: Session = Depends(get_session)):\n    user_manager.create_user(session, user)\n    return {\"message\": \"User registered successfully\"}\n\n\n@app.post(\"/token/\")\ndef login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    session = Session(engine)\n    user = user_manager.get_user(session, username=form_data.username)\n    if not user or not user_manager.verify_password(form_data.password, user.hashed_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token = user_manager.create_access_token(data={\"sub\": user.username})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\ndef get_current_user(token: str = Depends(oauth2_scheme), session: Session = Depends(get_session)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n    except jwt.PyJWTError:\n        raise credentials_exception\n    user = user_manager.get_user(session, username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\n@app.get(\"/users/me/\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n\n\n@app.get(\"/users/{username}/\", response_model=User)\nasync def read_user(username: str, current_user: User = Depends(get_current_user),\n                    session: Session = Depends(get_session)):\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n    user = user_manager.get_user(session, username)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"User not found\",\n        )\n    return user\n\n\n@app.get(\"/users/\", response_model=List[User])\nasync def read_users(current_user: User = Depends(get_current_user), session: Session = Depends(get_session)):\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n    return session.exec(select(User)).all()\n\n\n@app.put(\"/users/change_password/\")\nasync def change_password(new_password: str, current_user: User = Depends(get_current_user), session: Session = Depends(get_session)):\n    # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    user_manager.change_password(session, current_user.username, new_password)\n    return {\"message\": \"Password changed successfully\"}\n</code></pre>"},{"location":"Lab1/views/#task","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Task","text":"<pre><code>@app.get(\"/tasks_list\")\ndef tasks_list(session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; List[Task]:\n    return session.exec(select(Task)).all()\n\n\n@app.get(\"/task/{task_id}\", response_model=TaskDayNotificationsUser)\ndef tasks_get(task_id: int, session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; Task:\n    task = session.get(Task, task_id)\n    return task\n\n\n@app.post(\"/task\")\ndef tasks_create(task: TaskDefault, session=Depends(get_session),\n                 current_user: User = Depends(get_current_user)) -&gt; TypedDict('Response',\n                                                                              {\"status\": int, \"data\": Task}):\n    task = Task.model_validate(task)\n    session.add(task)\n    session.commit()\n    session.refresh(task)\n    return {\"status\": 200, \"data\": task}\n\n\n@app.delete(\"/task/delete{task_id}\")\ndef task_delete(task_id: int, session=Depends(get_session), current_user: User = Depends(get_current_user)):\n    task = session.get(Task, task_id)\n    if not task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    session.delete(task)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.patch(\"/task{task_id}\")\ndef task_update(task_id: int, task: TaskDefault, session=Depends(get_session),\n                current_user: User = Depends(get_current_user)) -&gt; Task:\n    db_task = session.get(Task, task_id)\n    if not db_task:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    task_data = task.model_dump(exclude_unset=True)\n    for key, value in task_data.items():\n        setattr(db_task, key, value)\n    session.add(db_task)\n    session.commit()\n    session.refresh(db_task)\n    return db_task\n\n\n@app.get(\"/tasks_users_list\")\ndef tasks_users_list(session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; List[TaskUser]:\n    return session.exec(select(TaskUser)).all()\n\n\n@app.get(\"/task_user/{task_id}&amp;{user_id}\", response_model=TaskUser)\ndef tasks_get(task_id: int, user_id: str, session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; TaskUser:\n    task_user = session.get(TaskUser, (task_id, user_id))\n    return task_user\n\n\n@app.post(\"/task_user\")\ndef tasks_users_create(task_user: TaskUser, session=Depends(get_session),\n                 current_user: User = Depends(get_current_user)) -&gt; TypedDict('Response',\n                                                                              {\"status\": int, \"data\": TaskUser}):\n    task_user = TaskUser.model_validate(task_user)\n    session.add(task_user)\n    session.commit()\n    session.refresh(task_user)\n    return {\"status\": 200, \"data\": task_user}\n</code></pre>"},{"location":"Lab1/views/#day","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Day","text":"<pre><code>@app.get(\"/timetabledays_list\")\ndef timetabledays_list(session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; List[\n    TimetableDay]:\n    return session.exec(select(TimetableDay)).all()\n\n\n@app.get(\"/timetableday/{timetableday_id}\", response_model=TimetableDayWeek)\ndef timetableday_get(timetableday_id: int, session=Depends(get_session),\n                     current_user: User = Depends(get_current_user)) -&gt; TimetableDay:\n    day = session.get(TimetableDay, timetableday_id)\n    return day\n\n\n@app.post(\"/timetableday\")\ndef timetableday_create(day: TimetableDayDefault, session=Depends(get_session),\n                        current_user: User = Depends(get_current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                                  \"data\": TimetableDay}):\n    day = TimetableDay.model_validate(day)\n    session.add(day)\n    session.commit()\n    session.refresh(day)\n    return {\"status\": 200, \"data\": day}\n</code></pre>"},{"location":"Lab1/views/#week","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Week","text":"<pre><code>@app.get(\"/timetableweeks_list\")\ndef timetableweeks_list(session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; List[\n    TimetableWeek]:\n    return session.exec(select(TimetableWeek)).all()\n\n\n@app.get(\"/timetableweek/{timetableweek_id}\")\ndef timetableweek_get(timetableweek_id: int, session=Depends(get_session),\n                      current_user: User = Depends(get_current_user)) -&gt; TimetableWeek:\n    return session.get(TimetableWeek, timetableweek_id)\n\n\n@app.post(\"/timetableweek\")\ndef timetableweek_create(week: TimetableWeek, session=Depends(get_session),\n                         current_user: User = Depends(get_current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                                   \"data\": TimetableWeek}):\n    week = TimetableWeek.model_validate(week)\n    session.add(week)\n    session.commit()\n    session.refresh(week)\n    return {\"status\": 200, \"data\": week}\n</code></pre>"},{"location":"Lab1/views/#notification","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Notification","text":"<pre><code>@app.get(\"/tasks_notifications_list\")\ndef tasks_notifications_list(session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; List[TaskNotification]:\n    return session.exec(select(TaskNotification)).all()\n\n\n@app.get(\"/task_notification/{task_id}&amp;{notification_id}\", response_model=TaskNotification)\ndef tasks_notifications_get(task_id: int, notification_id: str, session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; TaskNotification:\n    task_notification = session.get(TaskNotification, (task_id, notification_id))\n    return task_notification\n\n\n@app.post(\"/task_notification\")\ndef task_notifications_create(task_notification: TaskNotification, session=Depends(get_session),\n                 current_user: User = Depends(get_current_user)) -&gt; TypedDict('Response',\n                                                                              {\"status\": int, \"data\": TaskNotification}):\n    task_notification = TaskNotification.model_validate(task_notification)\n    session.add(task_notification)\n    session.commit()\n    session.refresh(task_notification)\n    return {\"status\": 200, \"data\": task_notification}\n\n\n@app.get(\"/notifications_list\")\ndef notifications_list(session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; List[\n    Notification]:\n    return session.exec(select(Notification)).all()\n\n\n@app.get(\"/notification/{notification_id}\")\ndef notification_get(notification_id: int, session=Depends(get_session),\n                     current_user: User = Depends(get_current_user)) -&gt; Notification:\n    return session.get(Notification, notification_id)\n\n\n@app.post(\"/notification\")\ndef notification_create(notification: Notification, session=Depends(get_session),\n                        current_user: User = Depends(get_current_user)) -&gt; TypedDict('Response',\n                                                                                     {\"status\": int,\n                                                                                      \"data\": Notification}):\n    notification = Notification.model_validate(notification)\n    session.add(notification)\n    session.commit()\n    session.refresh(notification)\n    return {\"status\": 200, \"data\": notification}\n</code></pre>"},{"location":"Lab1/views/#comment","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Comment","text":"<pre><code>@app.get(\"/comments_list\")\ndef comments_list(session=Depends(get_session), current_user: User = Depends(get_current_user)) -&gt; List[\n    Comment]:\n    return session.exec(select(Comment)).all()\n\n\n@app.get(\"/comment/{comment_id}\", response_model=CommentUserTask)\ndef comment_get(comment_id: int, session=Depends(get_session),\n                     current_user: User = Depends(get_current_user)) -&gt; Comment:\n    return session.get(Comment, comment_id)\n\n\n@app.post(\"/comment\")\ndef comment_create(comment: CommentDefault, session=Depends(get_session),\n                        current_user: User = Depends(get_current_user)) -&gt; TypedDict('Response',\n                                                                                     {\"status\": int,\n                                                                                      \"data\": Comment}):\n    comment = Comment.model_validate(comment)\n    session.add(comment)\n    session.commit()\n    session.refresh(comment)\n    return {\"status\": 200, \"data\": comment}\n</code></pre>"},{"location":"Lab2/Task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b Asyncio Multiprocessing Threading 10^6 0.029 \u0441 0.299 \u0441 0.042 \u0441 10^9 39.746 \u0441 6.394 \u0441 65.827 \u0441 <p>\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432, \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:</p> <ul> <li> Asyncio \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c, \u043e\u0434\u043d\u0430\u043a\u043e \u0441\u0430\u043c\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u043b\u0430\u0445 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b Multiprocesing.</li> <li> \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0438\u0437-\u0437\u0430 GIL (Global Interpreter Lock) \u0432 Python, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u0435\u0433\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 CPU-bound \u0437\u0430\u0434\u0430\u0447. </li> </ul> <p> \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. </p> \u041b\u0438\u0441\u0442\u0438\u043d\u0433 Async <pre>\n<code>\nimport asyncio\nimport time\n\n\nasync def calculate_sum(start, stop):\n    summary = 0\n    for i in range(start, stop):\n        summary += i\n    return summary\n\n\nasync def main():\n    tasks = [asyncio.create_task(calculate_sum(i, i + 10**4)) for i in range(1, 10**6, 10**4)]\n\n    for task in tasks:\n        await task\n\n    return sum(task.result() for task in tasks)\n\n\ntime_start = time.time()\nprint(asyncio.run(main()))\nprint(time.time() - time_start)\n# \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 0.02916574478149414\n</code>\n</pre> Multiprocessing <pre>\n<code>\nimport multiprocessing\nimport time\n\n\ndef calculate_sum(args):\n    start, stop = args\n    summary = 0\n    for i in range(start, stop):\n        summary += i\n    return summary\n\n\ndef main():\n    pool = multiprocessing.Pool()\n\n    results = pool.map(calculate_sum, [(i, i + 10**4) for i in range(1, 10**6, 10**4)])\n\n    pool.close()\n    pool.join()\n\n    return sum(results)\n\n\nif __name__ == '__main__':\n    time_start = time.time()\n    print(main())\n    print(time.time() - time_start)\n# \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 0.29891276359558105\n</code>\n</pre> Threads <pre>\n<code>\nimport threading\nimport time\n\n\ndef calculate_sum(start, stop, result):\n    summary = 0\n    for i in range(start, stop):\n        summary += i\n    result.append(summary)\n\n\ndef main():\n    result = []\n    threads = [threading.Thread(target=calculate_sum, args=(i, i + 10**4, result)) for i in range(1, 10**6, 10**4)]\n    for thread in threads:\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    return sum(result)\n\n\ntime_start = time.time()\nprint(main())\nprint(time.time() - time_start)\n# \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 0.042426347732543945\n</code>\n</pre>"},{"location":"Lab2/Task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441\u0430\u0439\u0442\u0430 Asyncio Multiprocessing Threading 15 497.04 \u0441 207.06 \u0441 199.99 \u0441 <p>\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0441\u0435\u0431\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434. \u041d\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f,  \u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u0442.\u0435. \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. </p> \u041b\u0438\u0441\u0442\u0438\u043d\u0433 parser <pre>\n<code>\n# \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438\ndef parse(season_start: int, season_end: int, year: int) -&gt; None:  # threads\n    import requests\n    from fake_useragent import UserAgent\n    from bs4 import BeautifulSoup\n    import psycopg2\n    from datetime import datetime, timedelta\n    import random\n\n    conn = psycopg2.connect(host=\"localhost\", dbname=\"taskmanager\", user=\"postgres\", password=\"admin\")\n    cur = conn.cursor()\n\n    for season in range(season_start, season_end):\n        month = 10\n        while month != 8:\n            url = f'https://www.mariinsky.ru/playbill/archive/?season={season}&amp;month={month}&amp;year={year}'\n\n            page = requests.get(url, headers={'User-Agent': UserAgent().chrome})\n            soup = BeautifulSoup(page.text, 'lxml')\n            elems = soup.find_all('div', class_='row light day_row') + soup.find_all('div', class_='row dark day_row')\n            for elem in elems:\n                title = elem.find('div', class_='spec_name').text\n                description = elem.find('div', class_='descr').text.replace('\\n', ' ')\n\n                time_div = str(elem.find('div', class_='time'))\n                data = time_div[time_div.index('datetime=\"') + 10:time_div.index('\" itemprop=\"')]\n                time_start = datetime.strptime(data[:data.index('+')], '%Y-%m-%dT%H:%M:%S')\n                planned_time_end = time_start + timedelta(hours=random.randint(1, 5))\n                priority = 1\n                creator_id = 'admin'\n\n                cur.execute(f'SELECT id FROM timetableday WHERE date = \\'{data[:data.index('T')]}\\'')\n                day_id = cur.fetchone()[0]\n                cur.execute(\n                    f'INSERT INTO public.task(title, description, day_id, time_start, planned_time_end, priority, creator_id) '\n                    f'VALUES (\\'{title}\\', \\'{description}\\', {day_id}, \\'{time_start}\\', \\'{planned_time_end}\\', {priority}, \\'{creator_id}\\')')\n\n            month += 1\n            if month == 13:\n                month = 1\n                year += 1\n\n    conn.commit()\n    conn.close()\n</code>\n</pre> Async <pre>\n<code>\nfrom parser import parse\nimport asyncio\nimport time\n\n\nasync def main():\n    tasks = []\n\n    for season_start, year in zip(range(226, 241, 5), range(2008, 2024, 5)):\n        tasks.append(asyncio.create_task(parse(season_start, season_start + 4, year)))\n    time.sleep(15)\n\n    for task in tasks:\n        await task\n\n\ntime_start = time.time()\nasyncio.run(main())\nprint(time.time() - time_start)\n# 497.043781042099\n</code>\n</pre> Multiprocessing <pre>\n<code>\nfrom parser import parse\nimport multiprocessing\nimport time\n\n\ndef main():\n    pool = multiprocessing.Pool()\n\n    results = pool.map(parse, [(season_start, season_start + 4, year) for season_start, year in zip(range(226, 241, 5), range(2008, 2024, 5))])\n\n    pool.close()\n    pool.join()\n\n\nif __name__ == '__main__':\n    time_start = time.time()\n    main()\n    print(time.time() - time_start)\n\n# 207.05740213394165\n</code>\n</pre> Threads <pre>\n<code>\nfrom parser import parse\nimport threading\nimport time\n\n\ndef main():\n    threads = [threading.Thread(target=parse, args=(season_start, season_start + 4, year)) for season_start, year in zip(range(226, 241, 5), range(2008, 2024, 5))]\n    for thread in threads:\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n\ntime_start = time.time()\nmain()\nprint(time.time() - time_start)\n# 199.98758697509766\n</code>\n</pre>"},{"location":"Lab3/main/","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b <p>\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0439 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0431\u043e\u0442. </p> <p>\u0414\u0430\u043b\u0435\u0435 \u044f \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u0432 \u0441\u0432\u043e\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 Celery \u0438 Redis, \u0442.\u043a. \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. </p> <pre>\n<code>\nfrom celery import Celery\nfrom pydantic import RedisDsn\nfrom dotenv import dotenv_values\nimport os\nimport requests\nfrom fake_useragent import UserAgent\nfrom bs4 import BeautifulSoup\nimport psycopg2\nfrom datetime import datetime, timedelta\nimport random\n\nredis_dsn = str(\n    RedisDsn.build(\n        scheme='redis',\n        host=os.getenv('BK_HOST', 'localhost'),\n        port=int(os.getenv('BK_PORT', 6379)),\n        path='0',\n    )\n)\n\napp = Celery(\n    'queue',\n    broker=redis_dsn,\n    backend=redis_dsn,\n)\n\n\n@app.task\ndef parse(season_start: int, season_end: int, year: int) -&gt; None:\n    conn = psycopg2.connect(\n        host=os.getenv('DB_HOST', 'localhost'),\n        port=os.getenv('DB_PORT', 5432),\n        dbname=os.getenv('DB_DATABASE', 'postgres'),\n        user=os.getenv('DB_USER', 'postgres'),\n        password=os.getenv('DB_PASSWORD', 'postgres'),\n    )\n    cur = conn.cursor()\n    for season in range(season_start, season_end):\n        month = 10\n        while month != 8:\n            url = f'https://www.mariinsky.ru/playbill/archive/?season={season}&amp;month={month}&amp;year={year}'\n            page = requests.get(url, headers={'User-Agent': UserAgent().chrome})\n            soup = BeautifulSoup(page.text, 'lxml')\n            elems = soup.find_all('div', class_='row light day_row') + soup.find_all('div', class_='row dark day_row')\n            for elem in elems:\n                title = elem.find('div', class_='spec_name').text\n                description = elem.find('div', class_='descr').text.replace('\\n', ' ')\n                time_div = str(elem.find('div', class_='time'))\n                data = time_div[time_div.index('datetime=\"') + 10:time_div.index('\" itemprop=\"')]\n                time_start = datetime.strptime(data[:data.index('+')], '%Y-%m-%dT%H:%M:%S')\n                planned_time_end = time_start + timedelta(hours=random.randint(1, 5))\n                priority = 1\n                creator_id = 'admin'\n                cur.execute(f'SELECT id FROM timetableday WHERE date = \\'{data[:data.index('T')]}\\'')\n                day_id = cur.fetchone()[0]\n                cur.execute(\n                    f'INSERT INTO public.task(title, description, day_id, time_start, planned_time_end, priority, creator_id) '\n                    f'VALUES (\\'{title}\\', \\'{description}\\', {day_id}, \\'{time_start}\\', \\'{planned_time_end}\\', {priority}, \\'{creator_id}\\')')\n            month += 1\n            if month == 13:\n                month = 1\n                year += 1\n    conn.commit()\n    conn.close()\n</code>\n</pre> <p>\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u044f \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u0432 main.py, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443 \u043c\u0435\u043d\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI, \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430.  \u042d\u0442\u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u043e\u0431\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u043a \u0432\u043e\u0440\u043a\u0435\u0440\u0443 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 (POST), \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u044e\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (GET). </p> <pre>\n<code>\n@app.post(\"/parse\")\ndef parse(season_start: int, season_end: int, year: int) -&gt; dict:\n    task = worker.parse.delay(season_start, season_end, year)\n    return dict(task_id=task.id, status=task.status)\n\n\n@app.get(\"/parse\")\ndef get_parse_status(task_id: str) -&gt; dict:\n    task = worker.parse.AsyncResult(task_id)\n    return dict(task_id=task.id, status=task.status)\n</code>\n</pre> <p>\u0414\u0430\u043b\u044c\u0448\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u043e\u043a\u0435\u0440-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440, \u043a\u0443\u0434\u0430 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0441\u044f \u0432\u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.  \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u0441\u043e\u0437\u0434\u0430\u043b\u0430 \u0444\u0430\u0439\u043b\u044b Dockerfile \u0438 docker-compose.yaml, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043f\u0438\u0441\u0430\u043b\u0430 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0435\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p> Dockerfile <pre>\n<code>\nFROM huecker.io/library/python:3.12-slim\n\nRUN apt-get update &amp;&amp; apt-get install -y libpq-dev gcc\n\nWORKDIR /application\n\nCOPY requirements.txt .\n\nRUN pip install --no-cache -r requirements.txt\n</code>\n</pre> docker-compose.yaml <pre>\n<code>\nservices:\n  database:\n    container_name: database\n    image: huecker.io/library/postgres:16-alpine\n    env_file:\n      - .env\n    environment:\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_DATABASE=${DB_DATABASE}\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n    ports:\n      - \"${DB_PORT}:5432\"\n\n  broker:\n    container_name: broker\n    image: huecker.io/library/redis:latest\n    ports:\n      - \"${BK_PORT}:6379\"\n\n  application:\n    container_name: application\n    build: .\n    env_file:\n      - .env\n    environment: *envs\n    command: uvicorn main:app --host 0.0.0.0 --port ${AP_PORT}\n    volumes:\n      - .:/application\n    ports:\n      - \"${AP_PORT}:${AP_PORT}\"\n\n  queue:\n    container_name: queue\n    build: .\n    volumes:\n      - .:/application\n    env_file:\n      - .env\n    environment: *envs\n    command: celery -A worker:app worker\n\nvolumes:\n  pgdata:\n</code>\n</pre>"},{"location":"Practice/pr1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1","text":"<p>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1</p> <p>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2</p> <p>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3</p>"}]}